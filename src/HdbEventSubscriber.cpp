/*----- PROTECTED REGION ID(HdbEventSubscriber.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: HdbEventSubscriber.cpp,v 1.8 2014-03-07 14:05:54 graziano Exp $";
//=============================================================================
//
// file :        HdbEventSubscriber.cpp
//
// description : C++ source for the HdbEventSubscriber and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               HdbEventSubscriber are implemented in this file.
//
// project :     Tango Device Server.
//
// $Author: graziano $
//
// $Revision: 1.8 $
// $Date: 2014-03-07 14:05:54 $
//
// SVN only:
// $HeadURL$
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/hdb++/hdb++es/src/HdbEventSubscriber.cpp,v $
// $Log: HdbEventSubscriber.cpp,v $
// Revision 1.8  2014-03-07 14:05:54  graziano
// added ResetStatistics command
//
// Revision 1.7  2014-03-06 15:21:43  graziano
// StartArchivingAtStartup,
// start_all and stop_all,
// archiving of first event received at subscribe
//
// Revision 1.6  2014-02-20 15:17:29  graziano
// name and path fixing
// regenerated with new pogo
// added StartArchivingAtStartup property
//
// Revision 1.5  2013-09-02 12:18:46  graziano
// cleaned
//
// Revision 1.4  2013-08-26 13:24:57  graziano
// added transformation to lowercase
//
// Revision 1.3  2013-08-23 10:04:53  graziano
// development
//
// Revision 1.2  2013-08-14 13:10:07  graziano
// development
//
// Revision 1.1  2013-07-17 13:37:43  graziano
// *** empty log message ***
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <HdbEventSubscriber.h>
#include <HdbEventSubscriberClass.h>

/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber.cpp

/**
 *  HdbEventSubscriber class description:
 *    This class is able to subscribe on archive events and store value in Historical DB
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name          |  Method name
//================================================================
//  State                 |  Inherited (no method)
//  Status                |  Inherited (no method)
//  AttributeAdd          |  attribute_add
//  AttributeRemove       |  attribute_remove
//  AttributeStatus       |  attribute_status
//  Start                 |  start
//  Stop                  |  stop
//  AttributeStart        |  attribute_start
//  AttributeStop         |  attribute_stop
//  ResetStatistics       |  reset_statistics
//  Pause                 |  pause
//  AttributePause        |  attribute_pause
//  SetAttributeStrategy  |  set_attribute_strategy
//  GetAttributeStrategy  |  get_attribute_strategy
//  StopFaulty            |  stop_faulty
//  SetAttributeTTL       |  set_attribute_ttl
//  GetAttributeTTL       |  get_attribute_ttl
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  AttributeOkNumber           |  Tango::DevLong	Scalar
//  AttributeNokNumber          |  Tango::DevLong	Scalar
//  AttributePendingNumber      |  Tango::DevLong	Scalar
//  AttributeNumber             |  Tango::DevLong	Scalar
//  AttributeMaxStoreTime       |  Tango::DevDouble	Scalar
//  AttributeMinStoreTime       |  Tango::DevDouble	Scalar
//  AttributeMaxProcessingTime  |  Tango::DevDouble	Scalar
//  AttributeMinProcessingTime  |  Tango::DevDouble	Scalar
//  AttributeRecordFreq         |  Tango::DevDouble	Scalar
//  AttributeFailureFreq        |  Tango::DevDouble	Scalar
//  AttributeStartedNumber      |  Tango::DevLong	Scalar
//  AttributeStoppedNumber      |  Tango::DevLong	Scalar
//  AttributeMaxPendingNumber   |  Tango::DevLong	Scalar
//  StatisticsResetTime         |  Tango::DevDouble	Scalar
//  AttributePausedNumber       |  Tango::DevLong	Scalar
//  Context                     |  Tango::DevString	Scalar
//  AttributeList               |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeOkList             |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeNokList            |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributePendingList        |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeRecordFreqList     |  Tango::DevDouble	Spectrum  ( max = 10000)
//  AttributeFailureFreqList    |  Tango::DevDouble	Spectrum  ( max = 10000)
//  AttributeStartedList        |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeStoppedList        |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeEventNumberList    |  Tango::DevLong	Spectrum  ( max = 10000)
//  AttributeErrorList          |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributePausedList         |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeStrategyList       |  Tango::DevString	Spectrum  ( max = 10000)
//  ContextsList                |  Tango::DevString	Spectrum  ( max = 1000)
//  AttributeTTLList            |  Tango::DevULong	Spectrum  ( max = 10000)
//================================================================

namespace HdbEventSubscriber_ns
{
/*----- PROTECTED REGION ID(HdbEventSubscriber::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::HdbEventSubscriber()
 *	Description : Constructors for a Tango device
 *                implementing the classHdbEventSubscriber
 */
//--------------------------------------------------------
HdbEventSubscriber::HdbEventSubscriber(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(HdbEventSubscriber::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::constructor_1
}
//--------------------------------------------------------
HdbEventSubscriber::HdbEventSubscriber(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(HdbEventSubscriber::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::constructor_2
}
//--------------------------------------------------------
HdbEventSubscriber::HdbEventSubscriber(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(HdbEventSubscriber::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void HdbEventSubscriber::delete_device()
{
	DEBUG_STREAM << "HdbEventSubscriber::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	INFO_STREAM << "-------- Delete device's allocated object --------" << endl;
	pause();
	delete hdb_dev;
	INFO_STREAM << "-------- Delete device's allocated object done !--------" << endl;
	//Tango::client_leavefunc();

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::delete_device
	delete[] attr_StatisticsResetTime_read;
	delete[] attr_Context_read;
	delete[] attr_ContextsList_read;
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void HdbEventSubscriber::init_device()
{
	DEBUG_STREAM << "HdbEventSubscriber::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_StatisticsResetTime_read = new Tango::DevDouble[1];
	attr_Context_read = new Tango::DevString[1];
	attr_ContextsList_read = new Tango::DevString[1000];
	/*----- PROTECTED REGION ID(HdbEventSubscriber::init_device) ENABLED START -----*/
	//	Initialize device
	initialized = false;
	set_state(Tango::MOVING);
	set_status("Initializing....");

	//	Create one event handler by HDB access device
	INFO_STREAM << "HdbEventSubscriber id="<<omni_thread::self()->id()<<endl;
	string	status("");
	hdb_dev = new HdbDevice(subscribeRetryPeriod, pollingThreadPeriod, statisticsTimeWindow, checkPeriodicTimeoutDelay, this);
	uint8_t index=0;
	for(vector<string>::iterator it = contextsList.begin(); it != contextsList.end(); it++)
	{
		vector<string> res;
		hdb_dev->string_explode(*it, ":", &res);
		if(res.size()==2)
		{
			string context_upper(res[0]);
			std::transform(context_upper.begin(), context_upper.end(), context_upper.begin(), (int(*)(int))toupper);		//transform to uppercase
			DEBUG_STREAM << "CONFIGURING CONTEXTS: adding " << res[0] << " <-> " << (int)index;
			hdb_dev->contexts_map.insert(make_pair(res[0], res[1]));
			hdb_dev->contexts_map_upper.insert(make_pair(context_upper, res[0]));
			string context_list_element = *it;
			ContextsList_str[index]=context_list_element;
			attr_ContextsList_read[index] = const_cast<char*>(ContextsList_str[index].c_str());
			index++;
		}
	}
	if(hdb_dev->contexts_map_upper.find(ALWAYS_CONTEXT) == hdb_dev->contexts_map_upper.end())
	{
		DEBUG_STREAM << "CONFIGURING CONTEXTS: adding " << ALWAYS_CONTEXT << " <-> " << (int)index;
		hdb_dev->contexts_map.insert(make_pair(ALWAYS_CONTEXT, ALWAYS_CONTEXT_DESC));
		hdb_dev->contexts_map_upper.insert(make_pair(ALWAYS_CONTEXT, ALWAYS_CONTEXT));
		string context_list_element = string(ALWAYS_CONTEXT) + ": " + string(ALWAYS_CONTEXT_DESC);
		ContextsList_str[index]=context_list_element;
		attr_ContextsList_read[index] = const_cast<char*>(ContextsList_str[index].c_str());
		index++;
		contextsList.push_back(context_list_element);
	}
	defaultStrategy_upper = defaultStrategy;
	std::transform(defaultStrategy_upper.begin(), defaultStrategy_upper.end(), defaultStrategy_upper.begin(), (int(*)(int))toupper);		//transform to uppercase
	hdb_dev->defaultStrategy = defaultStrategy_upper;
	map<string, string>::iterator it = hdb_dev->contexts_map_upper.find(defaultStrategy_upper);
	if(it != hdb_dev->contexts_map_upper.end())
	{
		context_read = it->second.c_str();
		*attr_Context_read = const_cast<char*>(context_read.c_str());
		context_set = it->first;
	}
	else
	{
		ERROR_STREAM << "HdbEventSubscriber::init_device(): FAILED due to bad DefaultStrategy configuration: " << defaultStrategy << " is not present in ContextsList";
		exit(-1);
	}

	attr_AttributeRecordFreq_read = &hdb_dev->AttributeRecordFreq;
	attr_AttributeFailureFreq_read = &hdb_dev->AttributeFailureFreq;
	attr_AttributeRecordFreqList_read = &hdb_dev->AttributeRecordFreqList[0];
	attr_AttributeFailureFreqList_read = &hdb_dev->AttributeFailureFreqList[0];
	attr_AttributeEventNumberList_read = &hdb_dev->AttributeEventNumberList[0];

	try
	{
		hdb_dev->initialize();
	}
	catch(Tango::DevFailed &e)
	{
		status += "PushThread:\n";
		status += e.errors[0].desc;
	}
	//	Check if WARNING
	if (hdb_dev->status.length()>0)
	{
		status += "PushThread:\n";
		status += hdb_dev->status;
	}
	//	Set state and status if something wrong
	if (status.length()>0)
	{
		set_state(Tango::ALARM);
		set_status(status);
		INFO_STREAM << status << endl;
	}
	timespec now;
#ifdef _TG_WINDOWS_
	timespec_get(&now, TIME_UTC);
#else
	clock_gettime(CLOCK_MONOTONIC, &now);
#endif
	double dnow = (now.tv_sec) + ((double)(now.tv_nsec))/1000000000;
	last_statistics_reset_time = dnow;

	initialized = true;

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::init_device
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void HdbEventSubscriber::get_device_property()
{
	/*----- PROTECTED REGION ID(HdbEventSubscriber::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members
	subscribeRetryPeriod = 60;

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("SubscribeRetryPeriod"));
	dev_prop.push_back(Tango::DbDatum("AttributeList"));
	dev_prop.push_back(Tango::DbDatum("StatisticsTimeWindow"));
	dev_prop.push_back(Tango::DbDatum("CheckPeriodicTimeoutDelay"));
	dev_prop.push_back(Tango::DbDatum("PollingThreadPeriod"));
	dev_prop.push_back(Tango::DbDatum("LibConfiguration"));
	dev_prop.push_back(Tango::DbDatum("ContextsList"));
	dev_prop.push_back(Tango::DbDatum("DefaultStrategy"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on HdbEventSubscriberClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		HdbEventSubscriberClass	*ds_class =
			(static_cast<HdbEventSubscriberClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize SubscribeRetryPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  subscribeRetryPeriod;
		else {
			//	Try to initialize SubscribeRetryPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  subscribeRetryPeriod;
		}
		//	And try to extract SubscribeRetryPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  subscribeRetryPeriod;

		//	Try to initialize AttributeList from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  attributeList;
		else {
			//	Try to initialize AttributeList from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  attributeList;
		}
		//	And try to extract AttributeList value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributeList;

		//	Try to initialize StatisticsTimeWindow from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  statisticsTimeWindow;
		else {
			//	Try to initialize StatisticsTimeWindow from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  statisticsTimeWindow;
		}
		//	And try to extract StatisticsTimeWindow value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  statisticsTimeWindow;

		//	Try to initialize CheckPeriodicTimeoutDelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  checkPeriodicTimeoutDelay;
		else {
			//	Try to initialize CheckPeriodicTimeoutDelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  checkPeriodicTimeoutDelay;
		}
		//	And try to extract CheckPeriodicTimeoutDelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  checkPeriodicTimeoutDelay;

		//	Try to initialize PollingThreadPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pollingThreadPeriod;
		else {
			//	Try to initialize PollingThreadPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pollingThreadPeriod;
		}
		//	And try to extract PollingThreadPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pollingThreadPeriod;

		//	Try to initialize LibConfiguration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  libConfiguration;
		else {
			//	Try to initialize LibConfiguration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  libConfiguration;
		}
		//	And try to extract LibConfiguration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  libConfiguration;

		//	Try to initialize ContextsList from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  contextsList;
		else {
			//	Try to initialize ContextsList from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  contextsList;
		}
		//	And try to extract ContextsList value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  contextsList;

		//	Try to initialize DefaultStrategy from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultStrategy;
		else {
			//	Try to initialize DefaultStrategy from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultStrategy;
		}
		//	And try to extract DefaultStrategy value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultStrategy;

	}

	/*----- PROTECTED REGION ID(HdbEventSubscriber::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init
	//DEBUG_STREAM << "hdbAccessDevice      = " << hdbAccessDevice << endl;
	DEBUG_STREAM << "subscribeRetryPeriod = " << subscribeRetryPeriod << endl;

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void HdbEventSubscriber::always_executed_hook()
{
	DEBUG_STREAM << "HdbEventSubscriber::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests
	//	Do not check state before end ofinitializing phase
	if (initialized)
	{
		Tango::DevState	state = hdb_dev->subcribing_state();
		set_state(state);

		if (state==Tango::ON)
			set_status("Everything is OK");
		else
			set_status("At least, one signal is faulty");
	}

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "HdbEventSubscriber::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void HdbEventSubscriber::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "HdbEventSubscriber::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute AttributeOkNumber related method
 *	Description: Number of archived attributes not in error
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeOkNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeOkNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeOkNumber) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeOkNumber_read);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeOkNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeNokNumber related method
 *	Description: Number of archived attributes in error
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeNokNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeNokNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeNokNumber) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeNokNumber_read);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeNokNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributePendingNumber related method
 *	Description: Number of attributes waiting to be archived
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributePendingNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributePendingNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePendingNumber) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(&hdb_dev->AttributePendingNumber);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePendingNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeNumber related method
 *	Description: Number of configured attributes
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeNumber) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeNumber_read);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMaxStoreTime related method
 *	Description: Maximum storing time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeMaxStoreTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMaxStoreTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMaxStoreTime) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeMaxStoreTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMaxStoreTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMinStoreTime related method
 *	Description: Minimum storing time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeMinStoreTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMinStoreTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMinStoreTime) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeMinStoreTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMinStoreTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMaxProcessingTime related method
 *	Description: Maximum processing (from event reception to storage) time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeMaxProcessingTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMaxProcessingTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMaxProcessingTime) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeMaxProcessingTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMaxProcessingTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMinProcessingTime related method
 *	Description: Minimum processing (from event reception to storage) time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeMinProcessingTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMinProcessingTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMinProcessingTime) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeMinProcessingTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMinProcessingTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeRecordFreq related method
 *	Description: Record frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeRecordFreq(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeRecordFreq(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeRecordFreq) ENABLED START -----*/
	//	Set the attribute value
	if(*attr_AttributeRecordFreq_read == -1)
		attr.set_quality(Tango::ATTR_INVALID);
	else
	#ifdef _TG_WINDOWS_
		// On Windows the 2nd para type is time_t, why not timeval??
		attr.set_value_date_quality(attr_AttributeRecordFreq_read, hdb_dev->stats_thread->last_stat.tv_sec, Tango::ATTR_VALID);
	#else
		attr.set_value_date_quality(attr_AttributeRecordFreq_read, hdb_dev->stats_thread->last_stat, Tango::ATTR_VALID);
	#endif
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeRecordFreq
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeFailureFreq related method
 *	Description: Failure frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeFailureFreq(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeFailureFreq(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeFailureFreq) ENABLED START -----*/
	//	Set the attribute value
	if(*attr_AttributeFailureFreq_read == -1)
		attr.set_quality(Tango::ATTR_INVALID);
	else
	#ifdef _TG_WINDOWS_
		// On Windows the 2nd para type is time_t, why not timeval??
		attr.set_value_date_quality(attr_AttributeRecordFreq_read, hdb_dev->stats_thread->last_stat.tv_sec, Tango::ATTR_VALID);
	#else
		attr.set_value_date_quality(attr_AttributeRecordFreq_read, hdb_dev->stats_thread->last_stat, Tango::ATTR_VALID);
	#endif
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeFailureFreq
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStartedNumber related method
 *	Description: Number of archived attributes started
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeStartedNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStartedNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStartedNumber) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeStartedNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStartedNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStoppedNumber related method
 *	Description: Number of archived attributes stopped
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeStoppedNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStoppedNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStoppedNumber) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributeStoppedNumber_read);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStoppedNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMaxPendingNumber related method
 *	Description: Max number of attributes waiting to be archived
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeMaxPendingNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMaxPendingNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMaxPendingNumber) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->AttributeMaxPendingNumber);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMaxPendingNumber
}
//--------------------------------------------------------
/**
 *	Read attribute StatisticsResetTime related method
 *	Description: Seconds elapsed since the last statistics reset
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_StatisticsResetTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_StatisticsResetTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_StatisticsResetTime) ENABLED START -----*/
	timespec now;
#ifdef _TG_WINDOWS_
	timespec_get(&now, TIME_UTC);
#else
	clock_gettime(CLOCK_MONOTONIC, &now);
#endif
	double dnow = (now.tv_sec) + ((double)(now.tv_nsec))/1000000000;
	*attr_StatisticsResetTime_read = dnow - last_statistics_reset_time;
	//	Set the attribute value
	attr.set_value(attr_StatisticsResetTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_StatisticsResetTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributePausedNumber related method
 *	Description: Number of archived attributes paused
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributePausedNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributePausedNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePausedNumber) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(&hdb_dev->attr_AttributePausedNumber_read);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePausedNumber
}
//--------------------------------------------------------
/**
 *	Read attribute Context related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_Context(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_Context(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_Context) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Context_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_Context
}
//--------------------------------------------------------
/**
 *	Write attribute Context related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbEventSubscriber::write_Context(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::write_Context(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbEventSubscriber::write_Context) ENABLED START -----*/
	string argin(w_val);
	string argin_upper(w_val);
	std::transform(argin_upper.begin(), argin_upper.end(), argin_upper.begin(), (int(*)(int))toupper);		//transform to uppercase
	map<string, string>::iterator itmap = hdb_dev->contexts_map_upper.find(argin_upper);
	if(itmap == hdb_dev->contexts_map_upper.end())
	{
		Tango::Except::throw_exception(
					(const char *)"BadContext",
					"Context " + argin + " NOT DEFINED",
					(const char *)__func__);
	}
	context_set = itmap->first;
	context_read = itmap->second.c_str();
	*attr_Context_read = const_cast<char*>(context_read.c_str());
	
	vector<string> att_list_tmp;
	hdb_dev->get_sig_list(att_list_tmp);
	for (unsigned int i=0 ; i<att_list_tmp.size() ; i++)
	{
		bool is_current_context;
		try
		{
			hdb_dev->shared->veclock.readerIn();
			is_current_context = hdb_dev->shared->is_current_context(att_list_tmp[i], context_set);
			DEBUG_STREAM << "HdbEventSubscriber::write_Context="<<context_set<<" : " << att_list_tmp[i] << " is_current_context=" << (is_current_context ? "Y" : "N") << endl;
			hdb_dev->shared->veclock.readerOut();
		}
		catch(Tango::DevFailed &e)
		{
			hdb_dev->shared->veclock.readerOut();
			INFO_STREAM << __func__ << ": Failed to check is_current_context for " << att_list_tmp[i];
			Tango::Except::re_throw_exception(e,
						(const char *)"BadSignalName",
						"Signal " + att_list_tmp[i] + " NOT subscribed",
						(const char *)__func__);
		}
		if(is_current_context)
			attribute_start((Tango::DevString)att_list_tmp[i].c_str());
		else
			attribute_stop((Tango::DevString)att_list_tmp[i].c_str());
	}

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::write_Context
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeList related method
 *	Description: Returns the configured attribute list
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeList) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeList_read, hdb_dev->attribute_list_str_size);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeOkList related method
 *	Description: Returns the attributes not on error list
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeOkList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeOkList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeOkList) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeOkList_read, hdb_dev->attribute_ok_list_str_size);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeOkList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeNokList related method
 *	Description: Returns the attributes on error list
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeNokList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeNokList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeNokList) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeNokList_read, hdb_dev->attribute_nok_list_str_size);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeNokList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributePendingList related method
 *	Description: Returns the list attributes waiting to be archived
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributePendingList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributePendingList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePendingList) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributePendingList_read, hdb_dev->attribute_pending_list_str_size);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePendingList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeRecordFreqList related method
 *	Description: Returns the list of record frequencies
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeRecordFreqList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeRecordFreqList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeRecordFreqList) ENABLED START -----*/
	if(*attr_AttributeRecordFreq_read == -1)
		attr.set_quality(Tango::ATTR_INVALID);
	//	Set the attribute value
#ifdef _TG_WINDOWS_
	// On Windows the 2nd para type is time_t, why not timeval??
	attr.set_value_date_quality(attr_AttributeRecordFreqList_read, hdb_dev->stats_thread->last_stat.tv_sec, Tango::ATTR_VALID, hdb_dev->attr_AttributeNumber_read);
#else
	attr.set_value_date_quality(attr_AttributeRecordFreqList_read, hdb_dev->stats_thread->last_stat, Tango::ATTR_VALID, hdb_dev->attr_AttributeNumber_read);
#endif
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeRecordFreqList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeFailureFreqList related method
 *	Description: Returns the list of failure frequencies
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeFailureFreqList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeFailureFreqList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeFailureFreqList) ENABLED START -----*/
	if(*attr_AttributeFailureFreq_read == -1)
		attr.set_quality(Tango::ATTR_INVALID);
	//	Set the attribute value
#ifdef _TG_WINDOWS_
	// On Windows the 2nd para type is time_t, why not timeval??
	attr.set_value_date_quality(attr_AttributeRecordFreqList_read, hdb_dev->stats_thread->last_stat.tv_sec, Tango::ATTR_VALID, hdb_dev->attr_AttributeNumber_read);
#else
	attr.set_value_date_quality(attr_AttributeFailureFreqList_read, hdb_dev->stats_thread->last_stat, Tango::ATTR_VALID, hdb_dev->attr_AttributeNumber_read);
#endif
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeFailureFreqList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStartedList related method
 *	Description: Returns the attributes started list
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeStartedList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStartedList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStartedList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeStartedList_read, hdb_dev->attribute_started_list_str_size);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStartedList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStoppedList related method
 *	Description: Returns the attributes stopped list
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeStoppedList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStoppedList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStoppedList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeStoppedList_read, hdb_dev->attribute_stopped_list_str_size);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStoppedList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeEventNumberList related method
 *	Description: Returns the list of numbers of events received
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeEventNumberList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeEventNumberList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeEventNumberList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_AttributeEventNumberList_read, hdb_dev->attr_AttributeNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeEventNumberList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeErrorList related method
 *	Description: Returns the list of attribute errors
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeErrorList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeErrorList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeErrorList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeErrorList_read, hdb_dev->attribute_error_list_str_size);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeErrorList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributePausedList related method
 *	Description: Returns the attributes stopped list
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributePausedList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributePausedList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePausedList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributePausedList_read, hdb_dev->attribute_paused_list_str_size);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePausedList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStrategyList related method
 *	Description: Returns the list of attribute strategy
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeStrategyList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStrategyList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStrategyList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeContextList_read, hdb_dev->attribute_context_list_str_size);
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStrategyList
}
//--------------------------------------------------------
/**
 *	Read attribute ContextsList related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 1000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_ContextsList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_ContextsList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_ContextsList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ContextsList_read, contextsList.size());
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_ContextsList
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeTTLList related method
 *	Description: Returns the list of attribute strategy
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void HdbEventSubscriber::read_AttributeTTLList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbEventSubscriber::read_AttributeTTLList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeTTLList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(hdb_dev->attr_AttributeTTLList_read, hdb_dev->attr_AttributeNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeTTLList
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void HdbEventSubscriber::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(HdbEventSubscriber::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command AttributeAdd related method
 *	Description: Add a new attribute to archive in HDB.
 *
 *	@param argin Attribute name, strategy, ttl
 */
//--------------------------------------------------------
void HdbEventSubscriber::attribute_add(const Tango::DevVarStringArray *argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::AttributeAdd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_add) ENABLED START -----*/

	//	Add your own code
	string	signame;
	vector<string> contexts;
	Tango::DevULong ttl=DEFAULT_TTL;
	bool context_error = false;
	string requested_strategy("");
	string applied_strategy("");
	if(argin->length() > 0)
	{
		signame = string((*argin)[0]);
	}

	if(argin->length() > 1)
	{
		string context((*argin)[1]);
		if(context.length() > 0)
		{
			requested_strategy += context;

			vector<string> res;
			hdb_dev->string_explode(context, "|", &res);
			for(vector<string>::iterator its=res.begin(); its!=res.end(); its++)
			{
				string context_upper(*its);
				std::transform(context_upper.begin(), context_upper.end(), context_upper.begin(), (int(*)(int))toupper);		//transform to uppercase
				map<string, string>::iterator it = hdb_dev->contexts_map_upper.find(context_upper);
				if(it == hdb_dev->contexts_map_upper.end())
				{
					context_error = true;
				}
				else
				{
					contexts.push_back(it->second);
				}
			}
		}
	}
	if(contexts.size()==0)
		contexts.push_back(defaultStrategy);
	if(argin->length() > 2)
	{
		string s_ttl((*argin)[2]);
		try
		{
			stringstream val;
			val << s_ttl;
			val >> ttl;
		}
		catch(...)
		{
			DEBUG_STREAM << __func__ << ": error extracting ttl from '" << s_ttl << "'";
		}
	}

	hdb_dev->add(signame, contexts, ttl);
    
	// since ttl is a parameter to this function, we should also
	// update this value inside the subscriber and database
	hdb_dev->updatettl(signame, ttl);

	bool is_current_context;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_current_context = hdb_dev->shared->is_current_context(signame, context_set);
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_current_context for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	if(is_current_context)
		attribute_start((Tango::DevString)signame.c_str());
	else
		attribute_stop((Tango::DevString)signame.c_str());

	if(context_error)
	{
		for(vector<string>::iterator its=contexts.begin(); its!=contexts.end(); its++)
		{
			applied_strategy += *its;
			if(its != contexts.end()-1)
				applied_strategy += string("|");
		}
		Tango::Except::throw_exception(
			(const char *)"BadStrategy",
				"Requested strategy: " + requested_strategy + "\nApplied strategy: " + applied_strategy,
				(const char *)__func__);
	}

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_add
}
//--------------------------------------------------------
/**
 *	Command AttributeRemove related method
 *	Description: Remove attribute from configuration.
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbEventSubscriber::attribute_remove(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::AttributeRemove()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_remove) ENABLED START -----*/

	//	Add your own code
	string	signame(argin);
	hdb_dev->fix_tango_host(signame);

	bool is_running;
	bool is_paused;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_running = hdb_dev->shared->is_running(signame);
		is_paused = hdb_dev->shared->is_paused(signame);
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_running or is_paused for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	if(is_running || is_paused)
	{
		hdb_dev->shared->stop(signame);
		hdb_dev->push_shared->stop_attr(signame);
	}
	hdb_dev->remove(signame);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_remove
}
//--------------------------------------------------------
/**
 *	Command AttributeStatus related method
 *	Description: Read a attribute status.
 *
 *	@param argin The attribute name
 *	@returns The attribute status.
 */
//--------------------------------------------------------
Tango::DevString HdbEventSubscriber::attribute_status(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "HdbEventSubscriber::AttributeStatus()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_status) ENABLED START -----*/

	//	Add your own code
	struct timeval tv;
	struct tm *nowtm;
	char buf[64];
	size_t strfret;

	time_t nowtime;
	string	signame(argin);
	hdb_dev->fix_tango_host(signame);

	stringstream attr_status;
	attr_status << "Event status       : "<<hdb_dev->get_sig_status(signame);
	attr_status << endl;
	attr_status << "Events engine      : "<<(hdb_dev->shared->get_sig_source(signame) ? "ZMQ" : "Notifd");
	attr_status << endl;
	bool is_running;
	bool is_paused;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_running = hdb_dev->shared->is_running(signame);
		is_paused = hdb_dev->shared->is_paused(signame);
		attr_status << "Archiving          : "<<((is_running && !is_paused) ? "Started" : (is_paused ? "Paused" : "Stopped"));
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_running or is_paused for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	attr_status << endl;

	tv = hdb_dev->shared->get_last_okev(signame);
	nowtime = tv.tv_sec;
	nowtm = localtime(&nowtime);
	uint32_t ok_ev = hdb_dev->shared->get_ok_event(signame);
	if(ok_ev != 0)
	{
		memset(buf, 0,  sizeof(buf));
		strfret = strftime(buf, sizeof(buf), "%Y-%m-%d %H:%M:%S", nowtm);
		snprintf(&buf[strfret], sizeof(buf)-strfret, ".%06ld", tv.tv_usec);
	}
	else
	{
		strcpy(buf,"YYYY-MM-DD HH:MM:SS.UUUUUU");
	}
	attr_status << "Event OK counter   : "<<ok_ev<<" - "<<buf;
	attr_status << endl;

	tv = hdb_dev->shared->get_last_nokev(signame);
	nowtime = tv.tv_sec;
	nowtm = localtime(&nowtime);
	uint32_t nok_ev = hdb_dev->shared->get_nok_event(signame);
	if(nok_ev != 0)
	{
		memset(buf, 0,  sizeof(buf));
		strfret = strftime(buf, sizeof(buf), "%Y-%m-%d %H:%M:%S", nowtm);
		snprintf(&buf[strfret], sizeof(buf)-strfret, ".%06ld", tv.tv_usec);
	}
	else
	{
		strcpy(buf,"YYYY-MM-DD HH:MM:SS.UUUUUU");
	}
	attr_status << "Event NOK counter  : "<<nok_ev<<" - "<<buf;
	attr_status << endl;

	tv = hdb_dev->push_shared->get_last_nokdb(signame);
	nowtime = tv.tv_sec;
	nowtm = localtime(&nowtime);
	uint32_t nok_db = hdb_dev->push_shared->get_nok_db(signame);
	if(nok_db != 0)
	{
		memset(buf, 0,  sizeof(buf));
		strfret = strftime(buf, sizeof(buf), "%Y-%m-%d %H:%M:%S", nowtm);
		snprintf(&buf[strfret], sizeof(buf)-strfret, ".%06ld", tv.tv_usec);
	}
	else
	{
		strcpy(buf,"YYYY-MM-DD HH:MM:SS.UUUUUU");
	}
	attr_status << "DB ERRORS counter  : "<<nok_db<<" - "<<buf;
	attr_status << endl;

	attr_status << "Storing time AVG   : "<<fixed<<hdb_dev->push_shared->get_avg_store_time(signame)<<"s";
	attr_status << endl;
	attr_status << "Processing time AVG: "<<fixed<<hdb_dev->push_shared->get_avg_process_time(signame)<<"s";
	argout  = new char[attr_status.str().length()+1];
	strcpy(argout, attr_status.str().c_str());

/*
	vector<string>	names   = hdb_dev->shared->get_sig_list();
	vector<bool>	sources = hdb_dev->shared->get_sig_source_list();	//1=ZMQ, 0=notifd
	argout = new Tango::DevVarLongStringArray();
	argout->svalue.length(names.size());
	argout->lvalue.length(names.size());
	for (unsigned int i=0 ; i<names.size() ; i++)
	{
		argout->svalue[i] = CORBA::string_dup(names[i].c_str());
		argout->lvalue[i] = sources[i];
	}
 */

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_status
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Start related method
 *	Description: Start archiving
 *
 */
//--------------------------------------------------------
void HdbEventSubscriber::start()
{
	DEBUG_STREAM << "HdbEventSubscriber::Start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::start) ENABLED START -----*/

	//	Add your own code
	vector<string> att_list_tmp;
	hdb_dev->get_sig_list(att_list_tmp);
	for (unsigned int i=0 ; i<att_list_tmp.size() ; i++)
	{
		bool is_current_context = false;
		try
		{
			hdb_dev->shared->veclock.readerIn();
			is_current_context = hdb_dev->shared->is_current_context(att_list_tmp[i], context_set);
			DEBUG_STREAM << "HdbEventSubscriber::start="<<context_set<<" : " << att_list_tmp[i] << " is_current_context=" << (is_current_context ? "Y" : "N") << endl;
			hdb_dev->shared->veclock.readerOut();
		}
		catch(Tango::DevFailed &e)
		{
			hdb_dev->shared->veclock.readerOut();
			INFO_STREAM << __func__ << ": Failed to check is_current_context for " << att_list_tmp[i];
			Tango::Except::re_throw_exception(e,
						(const char *)"BadSignalName",
						"Signal " + att_list_tmp[i] + " NOT subscribed",
						(const char *)__func__);
		}
		if(is_current_context)
			attribute_start((Tango::DevString)att_list_tmp[i].c_str());
	}
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::start
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: Stop archiving
 *
 */
//--------------------------------------------------------
void HdbEventSubscriber::stop()
{
	DEBUG_STREAM << "HdbEventSubscriber::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::stop) ENABLED START -----*/

	//	Add your own code
#if 0
	hdb_dev->shared->stop_all();
	hdb_dev->push_shared->stop_all();
#else
	vector<string> att_list_tmp;
	hdb_dev->get_sig_list(att_list_tmp);
	for (unsigned int i=0 ; i<att_list_tmp.size() ; i++)
		attribute_stop((Tango::DevString)att_list_tmp[i].c_str());
#endif
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::stop
}
//--------------------------------------------------------
/**
 *	Command AttributeStart related method
 *	Description: Start archiving single attribute
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbEventSubscriber::attribute_start(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::AttributeStart()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_start) ENABLED START -----*/

	//	Add your own code

	string	signame(argin);
	hdb_dev->fix_tango_host(signame);
	bool is_paused;
	bool is_stopped;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_paused = hdb_dev->shared->is_paused(signame);
		is_stopped = hdb_dev->shared->is_stopped(signame);
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_stopped or is_paused for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	if(is_paused || is_stopped)
	{
		hdb_dev->push_shared->start_attr(signame);
		hdb_dev->shared->start(signame);
	}

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_start
}
//--------------------------------------------------------
/**
 *	Command AttributeStop related method
 *	Description: Stop archiving single attribute
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbEventSubscriber::attribute_stop(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::AttributeStop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_stop) ENABLED START -----*/

	//	Add your own code

	string	signame(argin);
	hdb_dev->fix_tango_host(signame);
	bool is_running;
	bool is_paused;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_running = hdb_dev->shared->is_running(signame);
		is_paused = hdb_dev->shared->is_paused(signame);
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_running or is_paused for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	if(is_running || is_paused)
	{
		hdb_dev->shared->stop(signame);
		hdb_dev->push_shared->stop_attr(signame);
	}

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_stop
}
//--------------------------------------------------------
/**
 *	Command ResetStatistics related method
 *	Description: Reset statistic counters
 *
 */
//--------------------------------------------------------
void HdbEventSubscriber::reset_statistics()
{
	DEBUG_STREAM << "HdbEventSubscriber::ResetStatistics()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::reset_statistics) ENABLED START -----*/
	
	//	Add your own code
	hdb_dev->reset_statistics();
	timespec now;
#ifdef _TG_WINDOWS_
	timespec_get(&now, TIME_UTC);
#else
	clock_gettime(CLOCK_MONOTONIC, &now);
#endif
	double dnow = (now.tv_sec) + ((double)(now.tv_nsec))/1000000000;
	last_statistics_reset_time = dnow;
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::reset_statistics
}
//--------------------------------------------------------
/**
 *	Command Pause related method
 *	Description: Pause archiving
 *
 */
//--------------------------------------------------------
void HdbEventSubscriber::pause()
{
	DEBUG_STREAM << "HdbEventSubscriber::Pause()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::pause) ENABLED START -----*/
	//	Add your own code
#if 0
	hdb_dev->shared->pause_all();
	hdb_dev->push_shared->pause_all();
#else
	vector<string> att_list_tmp;
	hdb_dev->get_sig_list(att_list_tmp);
	for (unsigned int i=0 ; i<att_list_tmp.size() ; i++)
	{
		bool is_running;
		try
		{
			hdb_dev->shared->veclock.readerIn();
			is_running = hdb_dev->shared->is_running(att_list_tmp[i]);
			hdb_dev->shared->veclock.readerOut();
		}
		catch(Tango::DevFailed &e)
		{
			hdb_dev->shared->veclock.readerOut();
			INFO_STREAM << __func__ << ": Failed to check is_running for " << att_list_tmp[i];
			continue;
		}
		if(is_running)
		{
			try
			{
				attribute_pause((Tango::DevString)att_list_tmp[i].c_str());
			}
			catch(Tango::DevFailed &e)
			{}
		}
	}
#endif
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::pause
}
//--------------------------------------------------------
/**
 *	Command AttributePause related method
 *	Description: Pause archiving single attribute
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbEventSubscriber::attribute_pause(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::AttributePause()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_pause) ENABLED START -----*/
	//	Add your own code
	string	signame(argin);
	hdb_dev->fix_tango_host(signame);
	bool is_running;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_running = hdb_dev->shared->is_running(signame);
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_running for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	if(is_running)
	{
		hdb_dev->shared->pause(signame);
		hdb_dev->push_shared->pause_attr(signame);
	}
	else
	{
		Tango::Except::throw_exception(
					(const char *)"Not started",
					"Signal " + signame + " NOT started",
					(const char *)"attribute_pause");
	}
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_pause
}
//--------------------------------------------------------
/**
 *	Command SetAttributeStrategy related method
 *	Description: Update strategy associated to an already archived attribute.
 *
 *	@param argin Attribute name, strategy
 */
//--------------------------------------------------------
void HdbEventSubscriber::set_attribute_strategy(const Tango::DevVarStringArray *argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::SetAttributeStrategy()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::set_attribute_strategy) ENABLED START -----*/

	//	Add your own code
	string	signame;
	vector<string> contexts;
	bool context_error = false;
	string requested_strategy("");
	string applied_strategy("");
	if(argin->length() > 0)
	{
		signame = string((*argin)[0]);
	}
	for(size_t i = 0; i < argin->length() -1; i++)
	{
		string context((*argin)[i+1]);
		if(context.length() > 0)
		{
			requested_strategy += context;
			if(i != argin->length() -2)
				requested_strategy += string("|");
			vector<string> res;
			hdb_dev->string_explode(context, "|", &res);

			for(vector<string>::iterator its=res.begin(); its!=res.end(); its++)
			{
				string context_upper(*its);
				std::transform(context_upper.begin(), context_upper.end(), context_upper.begin(), (int(*)(int))toupper);		//transform to uppercase
				map<string, string>::iterator it = hdb_dev->contexts_map_upper.find(context_upper);
				if(it == hdb_dev->contexts_map_upper.end())
				{
					context_error = true;
				}
				else
				{
					contexts.push_back(it->second);
				}
			}
		}
	}
	if(contexts.size()==0)
		contexts.push_back(defaultStrategy);
	hdb_dev->update(signame, contexts);

	bool is_current_context;
	try
	{
		hdb_dev->shared->veclock.readerIn();
		is_current_context = hdb_dev->shared->is_current_context(signame, context_set);
		hdb_dev->shared->veclock.readerOut();
	}
	catch(Tango::DevFailed &e)
	{
		hdb_dev->shared->veclock.readerOut();
		INFO_STREAM << __func__ << ": Failed to check is_current_context for " << signame;
		Tango::Except::re_throw_exception(e,
					(const char *)"BadSignalName",
					"Signal " + signame + " NOT subscribed",
					(const char *)__func__);
	}
	if(is_current_context)
		attribute_start((Tango::DevString)signame.c_str());
	else
		attribute_stop((Tango::DevString)signame.c_str());

	if(context_error)
	{
		for(vector<string>::iterator its=contexts.begin(); its!=contexts.end(); its++)
		{
			applied_strategy += *its;
			if(its != contexts.end()-1)
				applied_strategy += string("|");
		}
		Tango::Except::throw_exception(
			(const char *)"BadStrategy",
				"Requested strategy: " + requested_strategy + "\nApplied strategy: " + applied_strategy,
				(const char *)__func__);
	}
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::set_attribute_strategy
}
//--------------------------------------------------------
/**
 *	Command GetAttributeStrategy related method
 *	Description: Read a attribute contexts.
 *
 *	@param argin The attribute name
 *	@returns The attribute contexts.
 */
//--------------------------------------------------------
Tango::DevString HdbEventSubscriber::get_attribute_strategy(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "HdbEventSubscriber::GetAttributeStrategy()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::get_attribute_strategy) ENABLED START -----*/

	//	Add your own code
	string	signame(argin);
	hdb_dev->fix_tango_host(signame);

	stringstream attr_context;
	attr_context << hdb_dev->shared->get_sig_context(signame);

	argout  = new char[attr_context.str().length()+1];
	strcpy(argout, attr_context.str().c_str());

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_attribute_strategy
	return argout;
}
//--------------------------------------------------------
/**
 *	Command StopFaulty related method
 *	Description: Stop archiving faulty attributes
 *
 */
//--------------------------------------------------------
void HdbEventSubscriber::stop_faulty()
{
	DEBUG_STREAM << "HdbEventSubscriber::StopFaulty()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::stop_faulty) ENABLED START -----*/

	//	Add your own code
	vector<string> att_list_tmp;
	hdb_dev->get_sig_on_error_list(att_list_tmp);
	for (unsigned int i=0 ; i<att_list_tmp.size() ; i++)
	{
		attribute_stop((Tango::DevString)att_list_tmp[i].c_str());
	}
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::stop_faulty
}
//--------------------------------------------------------
/**
 *	Command SetAttributeTTL related method
 *	Description: Update TTL associated to an already archived attribute.
 *
 *	@param argin Attribute name, TTL
 */
//--------------------------------------------------------
void HdbEventSubscriber::set_attribute_ttl(const Tango::DevVarStringArray *argin)
{
	DEBUG_STREAM << "HdbEventSubscriber::SetAttributeTTL()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::set_attribute_ttl) ENABLED START -----*/

	//	Add your own code
	string	signame;
	Tango::DevULong ttl = DEFAULT_TTL;
	if(argin->length() > 0)
	{
		signame = string((*argin)[0]);
	}
	if(argin->length() > 1)
	{
		string s_ttl = string((*argin)[1]);
		try
		{
			stringstream val;
			val << s_ttl;
			val >> ttl;
		}
		catch(...)
		{
			DEBUG_STREAM << __func__ << ": error extracting ttl from '" << s_ttl << "'";
		}
	}
	DEBUG_STREAM << __func__<<": before updatettl name="<<signame<<" ttl="<<ttl;
	hdb_dev->updatettl(signame, ttl);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::set_attribute_ttl
}
//--------------------------------------------------------
/**
 *	Command GetAttributeTTL related method
 *	Description: Read an attribute TTL.
 *
 *	@param argin The attribute name
 *	@returns The attribute TTL.
 */
//--------------------------------------------------------
Tango::DevULong HdbEventSubscriber::get_attribute_ttl(Tango::DevString argin)
{
	Tango::DevULong argout;
	DEBUG_STREAM << "HdbEventSubscriber::GetAttributeTTL()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbEventSubscriber::get_attribute_ttl) ENABLED START -----*/

	//	Add your own code
	string	signame(argin);
	hdb_dev->fix_tango_host(signame);

	argout = hdb_dev->shared->get_sig_ttl(signame);

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_attribute_ttl
	return argout;
}
//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriber::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void HdbEventSubscriber::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(HdbEventSubscriber::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::add_dynamic_commands
}

/*----- PROTECTED REGION ID(HdbEventSubscriber::namespace_ending) ENABLED START -----*/

	//	Additional Methods



	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::namespace_ending
} //	namespace
